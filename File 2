#This Script connects to the Windows Server Machine to trigger components - XML Parser, Sanction List Manager, Control List Cleanup
#This Connects to DB2 to verify the Database Count
#Enter the Server Machine details - ip, username, password to connect
#Developed by Sandipan Dasgupta

import pyodbc
import wmi, time
import glob
import win32api
import win32net
import win32netcon,win32wnet
import os
import os
import os.path
import shutil
import sys
import win32wnet


'''Connecting To DB2, Database = DQ5C, Schema = DQ5C_50'''
'''Checking DB Count from PQ5.CNTRL_LST_ITM table'''
def checkDB2count():
    global cursor
    try:
        conn = pyodbc.connect(Driver="{IBM DB2 ODBC DRIVER}",Database="DQ5C",Hostname="uafrdd70.saifg.rbc.com",Port="50000",Uid="pq5clnt",Pwd="monday12",CurrentSchema="DQ5C_70",ascii=True)
        global cursor
        cursor = conn.cursor()
        print "Successfully Connected To Database"
        cursor.execute("Select count(*) from PQ5.CNTRL_LST_ITM where cntrl_lst_id = '18';")
        list_1 = cursor.fetchall()
        print "Database Count is:"
        print list_1[0][0]

    except Exception as e:
        print "Connection to {} not established."
        print "\nDetails:- ", e
        cursor.close()


'''Triggering DJParser bat file from Remote Windows Desktop'''
def executeDJParser():
    ip = '10.241.212.61'
    username = "SE302965\se302965admin"
    password = "Se302965Q500"
    SW_SHOWNORMAL = 1
    print "Establishing connection to %s" %ip
    try:
        c = wmi.WMI(ip, user=username, password=password)
        print("Connection Established")
    except:
        print("Unable to establish Connection")

    process_startup = c.Win32_ProcessStartup.new()
    process_startup.ShowWindow = SW_SHOWNORMAL
    process_id, result = c.Win32_Process.Create(CommandLine="G:\SANCTION\AMLSANCTIONSERVER\DJPARSER\Bin\DJParser.bat",ProcessStartupInformation=process_startup)
    if result == 0:
        print "Process started successfully: %d" % process_id
    else:
        raise RuntimeError, "Problem creating process: %d" % result


'''Triggering Sanction List Manager bat file from Remote Windows Desktop'''
def executeSanctionListManager():
    ip = '10.241.202.117'
    username = "Se302091\\Se302091admin"
    password = "Se302091Q500"
    SW_SHOWNORMAL = 1
    print "Establishing connection to %s" %ip
    try:
        c = wmi.WMI(ip, user=username, password=password)
        print("Connection Established")
    except:
        print("Unable to establish Connection")

    print("Running Sanction List Manager")
    process_startup = c.Win32_ProcessStartup.new()
    process_startup.ShowWindow = SW_SHOWNORMAL
    process_id, result = c.Win32_Process.Create(CommandLine="G:\SANCTION\AMLSANCTIONSERVER\BIN\SanctionListManager.exe",ProcessStartupInformation=process_startup)
    if result == 0:
        print "Process started successfully: %d" % process_id
    else:
        raise RuntimeError, "Problem creating process: %d" % result


'''Triggering Control List Cleanup bat file from Remote Windows Desktop'''
def executeControlListCleanup():
    ip = '10.241.202.117'
    username = "Se302091\\Se302091admin"
    password = "Se302091Q500"
    SW_SHOWNORMAL = 1
    print "Establishing connection to %s" %ip
    try:
        c = wmi.WMI(ip, user=username, password=password)
        print("Connection Established")
    except:
        print("Unable to establish Connection")

    print("Running Control List Cleanup")
    process_startup = c.Win32_ProcessStartup.new()
    process_startup.ShowWindow = SW_SHOWNORMAL
    process_id, result = c.Win32_Process.Create(CommandLine="G:\SANCTION\AMLSANCTIONSERVER\BIN\ControlListCleanup.exe /R",ProcessStartupInformation=process_startup)
    if result == 0:
        print "Process started successfully: %d" % process_id
    else:
        raise RuntimeError, "Problem creating process: %d" % result


'''RETRIEVING FILEPATH OF THE LATEST LOG FILE'''
#Main Function
def Get_LogFile_Path(host, source, username=None, password=None):

    #wnet_connect function is connecting to the Remote Desktop
    wnet_connect(host, username, password)

    #Converting the Source directory into UNC format
    source = covert_unc(host,source)

    '''Opening file in Server Machine'''
    files_path = os.path.join(source, '*')
    files = sorted(glob.iglob(files_path), key=os.path.getctime, reverse=True)
    new_filepath = files[0]
    length = len(new_filepath)
    new_filepath = new_filepath[16:length]
    new_filepath = new_filepath.replace('$', ':')
    return new_filepath

'''Function to connect to Remote Desktop'''
def wnet_connect(host, username, password):
    unc = ''.join(['\\\\', host])
    print unc
    try:
        win32wnet.WNetAddConnection2(0, None, unc, None, username, password)
        print "Successfully Connected"
    except Exception, err:
        if isinstance(err, win32wnet.error):
            # Disconnect previous connections if detected, and reconnect.
            if err[0] == 1219:
                win32wnet.WNetCancelConnection2(unc, 0, 0)
                return wnet_connect(host, username, password)
        raise err

'''Function to convert path into UNC path'''
def covert_unc(host, path):
    '''Convert a file path on a host to a UNC path.'''
    return ''.join(['\\\\', host, '\\', path.replace(':', '$')])


'''READING THE LATEST LOG FILE'''
#Main Function
def Open_Log_File(host, source, username=None, password=None):

    #wnet_connect function is connecting to the Remote Desktop
    wnet_connect(host, username, password)

    #Converting the Source directory into UNC format
    source = covert_unc(host, source)

    '''Opening file in Server Machine'''
    file = open(source, "r")
    for line in file:
        print line

'''Function to connect to Remote Desktop'''
def wnet_connect(host, username, password):
    unc = ''.join(['\\\\', host])
    print unc
    try:
        win32wnet.WNetAddConnection2(0, None, unc, None, username, password)
        print "Successfully Connected"
    except Exception, err:
        if isinstance(err, win32wnet.error):
            # Disconnect previous connections if detected, and reconnect.
            if err[0] == 1219:
                win32wnet.WNetCancelConnection2(unc, 0, 0)
                return wnet_connect(host, username, password)
        raise err

'''Function to convert path into UNC path'''
def covert_unc(host, path):
    '''Convert a file path on a host to a UNC path.'''
    return ''.join(['\\\\', host, '\\', path.replace(':', '$')])


#Step 0: Check Count in DB2
#checkDB2count()
#Step 1: Execute DJ Parser Component and create the Dow Jones File
#executeDJParser()
#time.sleep(10)
#Step 2: Verifying DJParser Logs
#Fetching Latest Log File Path
"""source = 'G:\SANCTION\AMLSANCTIONSERVER\DJPARSER\Log'
time.sleep(10)
latest_file = Get_LogFile_Path('10.241.212.61', source, 'se302965\\se302965admin', 'Se302965Q500')
print 'Latest log file is ' + latest_file
source = latest_file
print ('Reading Log file...')
time.sleep(60)
Open_Log_File('10.241.212.61', source, 'se302965\\se302965admin', 'Se302965Q500')"""
#Step 3: Execute Sanction List Manager and load the data from Dow Jones File in DB2
#executeSanctionListManager()
#Step 4: Read Sanction List Manager Log File
"""source = 'G:\SANCTION\AMLSANCTIONSERVER\LOG'
time.sleep(10)
latest_file = Get_LogFile_Path('10.241.212.61', source, 'se302965\\se302965admin', 'Se302965Q500')
print 'Latest log file is ' + latest_file
source = latest_file
print ('Reading Log file...')
time.sleep(60)
Open_Log_File('10.241.212.61', source, 'se302965\\se302965admin', 'Se302965Q500')"""
#Step 5: Execute query to check count in DB2
#checkDB2count()
#Step 6: Execute Control List Cleanup to clear values from DB2
#executeControlListCleanup()
#Step 7: Read Control List Cleanup Logs
"""source = 'G:\SANCTION\AMLSANCTIONSERVER\CNTRLLSTMGR\audit'
time.sleep(10)
latest_file = Get_LogFile_Path('10.241.212.61', source, 'se302965\\se302965admin', 'Se302965Q500')
print 'Latest log file is ' + latest_file
source = latest_file
print ('Reading Log file...')
time.sleep(60)
Open_Log_File('10.241.212.61', source, 'se302965\\se302965admin', 'Se302965Q500')"""
#Step 8:Execute query to check count in DB2
#checkDB2count()






#SELF-USE: SERVER MACHINE FILE COPYING/READING/WRITING
"""'''COPY FILE FROM LOCAL TO REMOTE DESKTOP MACHINE'''
#main function
def Copy_Local_To_Server(host, source, dest_dir, username=None, password=None, move=False):

    #wnet_connect function is connecting to the Remote Desktop
    wnet_connect(host, username, password)

    #Converting the destination directory into UNC format
    dest_dir = covert_unc(host, dest_dir)

    # Pad a backslash to the destination directory if not provided.
    if not dest_dir[len(dest_dir) - 1] == '\\':
        dest_dir = ''.join([dest_dir, '\\'])

    # Create the destination dir if its not there.
    if not os.path.exists(dest_dir):
        os.makedirs(dest_dir)
    else:
        # Create a directory anyway if file exists so as to raise an error.
         if not os.path.isdir(dest_dir):
             os.makedirs(dest_dir)

    '''Opening file in Server Machine'''
    #file = open(source, "r")
    #for line in file:
    #    print line

    '''To move the file'''
    if move:
        shutil.move(source, dest_dir)
        print "Moved successfully"
        print()
    else:
        #To copy the file
        shutil.copy(source, dest_dir)
        print "Copied Successfully"

def wnet_connect(host, username, password):
    unc = ''.join(['\\\\', host])
    print unc
    try:
        win32wnet.WNetAddConnection2(0, None, unc, None, username, password)
        print "Successfully Connected"
    except Exception, err:
        if isinstance(err, win32wnet.error):
            # Disconnect previous connections if detected, and reconnect.
            if err[0] == 1219:
                win32wnet.WNetCancelConnection2(unc, 0, 0)
                return wnet_connect(host, username, password)
        raise err

'''Function to convert path into UNC path'''
def covert_unc(host, path):
    ''' Convert a file path on a host to a UNC path.'''
    return ''.join(['\\\\', host, '\\', path.replace(':', '$')])


host = '10.241.212.61'
source = r'C:\Users\329396220\Desktop\Projects\Mainframe WIKI.docx'
dest_dir = r'C:\Users\se302965admin\Desktop\Backup'
Copy_Local_To_Server(host, source, dest_dir, 'Se302965\\Se302965admin', 'Se302965Q500', move=False)"""


"""'''OPEN FILE IN WINDOWS REMOTE DESKTOP'''
#Main Function
def Open_File_In_Remote_Desktop(host, source, username=None, password=None):

    #wnet_connect function is connecting to the Remote Desktop
    wnet_connect(host, username, password)

    #Converting the Source directory into UNC format
    source = covert_unc(host, source)

    '''Opening file in Server Machine'''
    file = open(source, "r")
    for line in file:
        print line

def wnet_connect(host, username, password):
    unc = ''.join(['\\\\', host])
    print unc
    try:
        win32wnet.WNetAddConnection2(0, None, unc, None, username, password)
        print "Successfully Connected"
    except Exception, err:
        if isinstance(err, win32wnet.error):
            # Disconnect previous connections if detected, and reconnect.
            if err[0] == 1219:
                win32wnet.WNetCancelConnection2(unc, 0, 0)
                return wnet_connect(host, username, password)
        raise err

'''Function to convert path into UNC path'''
def covert_unc(host, path):
    '''Convert a file path on a host to a UNC path.'''
    return ''.join(['\\\\', host, '\\', path.replace(':', '$')])

host = '10.241.212.61'
source = r'G:\SANCTION\AMLSANCTIONSERVER\DJPARSER\Log\XMLParser.log'
Open_File_In_Remote_Desktop(host, source, 'se302965\\se302965admin', 'Se302965Q500')"""


"""'''COPY FILE FROM SERVER TO LOCAL'''
#main function
def Copy_Server_To_Local(host, source, dest_dir, username=None, password=None, move=False):

    #wnet_connect function is connecting to the Remote Desktop
    wnet_connect(host, username, password)

    #Converting the source directory into UNC format
    source = covert_unc(host, source)

    # Pad a backslash to the destination directory if not provided.
    if not dest_dir[len(dest_dir) - 1] == '\\':
        dest_dir = ''.join([dest_dir, '\\'])

    '''To move/copy the file'''
    if move:
        shutil.move(source, dest_dir)
        print "Moved successfully"
        print()
    else:
        #To copy the file
        shutil.copy(source, dest_dir)
        print "Copied Successfully"

def wnet_connect(host, username, password):
    unc = ''.join(['\\\\', host])
    print unc
    try:
        win32wnet.WNetAddConnection2(0, None, unc, None, username, password)
        print 'Successfully Connected'
    except Exception, err:
        if isinstance(err, win32wnet.error):
            # Disconnect previous connections if detected, and reconnect.
            if err[0] == 1219:
                win32wnet.WNetCancelConnection2(unc, 0, 0)
                return wnet_connect(host, username, password)
        raise err

'''Function to convert path into UNC path'''
def covert_unc(host, path):
    ''' Convert a file path on a host to a UNC path.'''
    return ''.join(['\\\\', host, '\\', path.replace(':', '$')])


host = '10.241.212.61'
source = r'G:\AMLDATA\ExtractorLog\Log_20190308081912449000.txt'
dest_dir = r'C:\Users\329396220\Desktop\Projects'
Copy_Server_To_Local(host, source, dest_dir, 'se302965\\se302965admin', 'Se302965Q500', move=False)"""


"""'''PICKING LATEST FILE'''
#Main Function
def Open_Recent_File(host, source, username=None, password=None):

    #wnet_connect function is connecting to the Remote Desktop
    wnet_connect(host, username, password)

    #Converting the Source directory into UNC format
    source = covert_unc(host, source)

    '''Opening file in Server Machine'''
    files_path = os.path.join(source, '*')
    files = sorted(glob.iglob(files_path), key=os.path.getctime, reverse=True)
    print files[0]



def wnet_connect(host, username, password):
    unc = ''.join(['\\\\', host])
    print unc
    try:
        win32wnet.WNetAddConnection2(0, None, unc, None, username, password)
        print "Successfully Connected"
    except Exception, err:
        if isinstance(err, win32wnet.error):
            # Disconnect previous connections if detected, and reconnect.
            if err[0] == 1219:
                win32wnet.WNetCancelConnection2(unc, 0, 0)
                return wnet_connect(host, username, password)
        raise err

'''Function to convert path into UNC path'''
def covert_unc(host, path):
    '''Convert a file path on a host to a UNC path.'''
    return ''.join(['\\\\', host, '\\', path.replace(':', '$')])

host = '10.241.212.61'
source = r'G:\SANCTION\AMLSANCTIONSERVER\CNTRLLSTMGR\audit'
Open_Recent_File(host, source, 'se302965\\se302965admin', 'Se302965Q500')"""
